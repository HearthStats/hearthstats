- content_for :actions do
  div class="btn blue btn-sm deck-text-trigger" = t('.toggle_text_import')

= form_for(@deck) do |f|
  = f.hidden_field :cardstring
  - if @deck.errors.any?
    div#error_explanation
      h2
        = pluralize(@deck.errors.count, "error")
        = t('shared.prohibited_this_being_saved', resouce: t('shared.deck'))
        |:
      ul
        - @deck.errors.full_messages.each do |msg|
          li = msg
  .row
    .col-sm-12.col-md-12.col-lg-3
      .form-body
        h3 Deck Details
        .form-group
          = f.label t('decks.form.class')
          |: &nbsp;
          .div
            = f.select :klass_id, options_for_select(klasses_hash.to_a,
              @deck.klass_id), class: 'form-control'
        .form-group
          = f.label t('decks.form.name')
          = f.text_field :name, class: 'form-control'
        .form-group
          = f.label t('decks.form.notes')
          = f.text_area :notes, :class => 'redactor form-control', :rows => 10, :cols => 20
        .form-group
          span = f.check_box :is_public
          label
            |&nbsp;
            = t("decks.form.this_deck_public")
        .form-group
          = f.submit class: 'btn btn-block green'
        - if params[:action] == 'edit'
          .form-group
            = f.submit "Save as v#{@deck.current_version.to_i + 0.1}",
              name: "minor_version", class: "btn yellow"
            = f.submit "Save as v#{@deck.current_version.to_i + 1}",
              name: "major_version", class: "btn green"
          .form-group
            label = t("decks.form.other_versions")
            div
              - @deck.deck_versions.each do |version|
                  = link_to "v#{version.version}", deck_path(@deck, version: version.version), class: "btn blue btn-sm btn-version"
    .col-sm-12.col-md-7.col-lg-6
      .form-body
        h3 Deck Builder
        div class="deck-text-box"
          h5
            |Deck Importer&nbsp;
            a href="http://hearthstats.uservoice.com/knowledgebase/articles/339087" target="_blank"
              i class="fa fa-question-circle tooltips" data-original-title="Click to learn more"
          = text_area_tag :deck_text, nil , class: "deck-text"
        #deckbuilder-list
          .form-group
            label =t("decks.form.search")
            input type="text" class="search form-control"
          div.card-list-filters.row
            .col-md-3
              label.filter-label =t("decks.form.filters")
              span.class-cards.btn.btn-sm.blue.filter =t("decks.form.class-cards-only")
            .col-md-9
              label.filter-label =t("decks.form.mana-filters")
              span.all-mana-filter.btn.btn-sm.blue.filter All
              -(0..9).each do |mana|
                span.mana-filter.btn.btn-sm.blue.filter data-mana="#{mana}" = mana
              span.mana-filter.btn.btn-sm.blue.filter data-mana="10" >10
          ul.list.card-list
            - Card.where(collectible: true, klass_id: [@deck.klass_id,nil], type_name: Card::TYPES.values).order(:mana).each do |card|
              li id="#{card.id}" data-rarity="#{card.rarity_id}" data-name="#{card.name}" data-mana="#{card.mana}"
                = image_tag "cards/#{card.name.parameterize}.png", class: "deckbuilder-img"
                p.name.hidden = card.name
                p.description.hidden = card.description.to_s
                p.mana.hidden = card.mana
                p.klass.hidden = card.klass_id
                p.rarity.hidden = Card::RARITY[card.rarity_id]
                .deckbuilder-actions
                  .add Add
                  .remove Remove
          .cf
          ul.pagination
    .col-sm-12.col-md-3.col-lg-3
      .total-card-count 0 of 30
      table#deck-list.tablesorter
        thead
          th.card-mana =t("decks.form.mana")
          th =t("decks.form.name")
          th =t("decks.form.count")
          th =t("decks.form.controls")
        tbody


javascript:

  var DeckBuilder = new function(){
    var cardArray = [];
    var totalCardCount = 0;
    var deck = gon.deck;
    var allCards = gon.cards;

    this.drawCards = function(){
      if ( deck.cardstring.length === 0 ) return;
      deckCards = deck.cardstring.split(",");
      deckCards.forEach(function(card){
        id = parseInt(card.split("_")[0]);
        quantity = parseInt(card.split("_")[1]);
        cardArray[id] = quantity;
        var card = { id: id, name: allCards[id-1].name, mana: allCards[id-1].mana };
        DeckBuilder._drawCardToTable(card)
        totalCardCount = totalCardCount + quantity;
      });

      DeckBuilder.createCardString();
      $('#deck_klass_id').val(deck.klass_id);

    }
    this.addCard = function(card){
      console.log(card);
      if (totalCardCount >= 30){
        this._errorNotification("deck-max");
        return;
      }
      leg = typeof card.leg !== 'undefined' ? card.leg : false;
      cardCount = cardArray[card.id]
      if (cardCount == undefined ){
        cardArray[card.id] = 1;
        totalCardCount = totalCardCount + 1;
      }else if( cardCount == 1 ){
        if (leg == true){
          this._errorNotification("legend");
          return
        }else{
          cardArray[card.id] = 2;
          totalCardCount = totalCardCount + 1;
        }
      }else{
        this._errorNotification("max");
      }
      this._addCardToTable(card);
      this.createCardString();
      $('#deck-list').tablesorter( {sortList: [[0,0]]} );
    };

    this.removeCard = function(id){
      id = parseInt(id)
      cardCount = cardArray[id]
      console.log(cardCount);
      if (cardCount == 2 ){
        cardArray[id] = 1
        totalCardCount = totalCardCount - 1;
      }else if( cardCount == 1 ){
        cardArray[id] = undefined;
        totalCardCount = totalCardCount - 1;
      }else{
        this._errorNotification("none");
      }
      this._removeCardToTable(id);
      this.createCardString();
      $('#deck-list').tablesorter( {sortList: [[0,0]]} );
    };

    this._errorNotification = function(type){
      if (type == "max"){
        console.log("Max Card Limit");
        toastr.error("#{t('decks.form.card_limit')}");
      }
      if (type == "deck-max"){
        console.log("Max Deck Limit");
        toastr.error("#{t('decks.form.deck_limit')}");
      }
      if (type == "none"){
        console.log("No More In Deck");
        toastr.error("#{t('decks.form.no_more')}");
      }
      if (type == "legend"){
        console.log("Only one legendary allowed per deck.");
        toastr.error("#{t('decks.form.legend')}");
      }
    };

    this._addCardToTable = function(card){
      if (cardArray[card.id] == 1){
        $("#deck-list").append("<tr id="+card.id+"><td class='card-mana'>"+card.mana+"</td><td>"+card.name+"</td><td class='card-count'>"+cardArray[card.id]+"</td><td><div class='quick-add'>+</div><div class='quick-remove'>-</div></td></tr>");
      } else if (cardArray[card.id] == 2){
        $("#deck-list tr#"+card.id+" .card-count").text("2");
      }
    };

    this._removeCardToTable = function(id){
      if (cardArray[id] == 1){
        $("#deck-list tr#"+id+" .card-count").text("1");
      } else if (cardArray[id] == undefined){
        $("#deck-list tr#"+id).fadeOut();
      }
      cardCount = cardCount - 1;
    };

    this._drawCardToTable = function(card){
      if (cardArray[card.id] == 1){
        $("#deck-list").append("<tr id="+card.id+"><td>"+card.mana+"</td><td>"+card.name+"</td><td class='card-count'>"+cardArray[card.id]+"</td><td><div class='quick-add'>+</div><div class='quick-remove'>-</div></td></tr>");
      } else if (cardArray[card.id] == 2){
        $("#deck-list").append("<tr id="+card.id+"><td>"+card.mana+"</td><td>"+card.name+"</td><td class='card-count'>2</td><td><div class='quick-add'>+</div><div class='quick-remove'>-</div></td></tr>");
      }
    };

    this.createCardString = function(){
      var _cardString = [];
      for (i = 0; i < cardArray.length; ++i) {
        if (cardArray[i] != undefined){
          _cardString.push(i+"_"+cardArray[i]);
        }
      }
      $('#deck_cardstring').val(_cardString.join());
      $('.total-card-count').text(totalCardCount + " of 30");
    }
  }

  $(".add").click(function(){
    id = parseInt($(this).parent().parent().attr('id'));
    name = $(this).parent().parent().data('name')
    mana = $(this).parent().parent().data('mana')
    leg = $(this).parent().parent().data('rarity') == '5' ? true : false;
    var card = { id: id, name: name, mana: mana, leg: leg };
    DeckBuilder.addCard(card);
  });

  $(".remove").click(function(){
    id = $(this).parent().parent().attr('id');
    DeckBuilder.removeCard(id);
  });

  $("#deck-list tbody").on( "click",".quick-add", function(){
    id = $(this).parent().parent().attr('id');
    name = $(this).parent().parent().data('name')
    mana = $(this).parent().parent().data('mana')
    leg = $(this).parent().parent().data('rarity') == '5' ? true : false;
    var card = { id: id, name: name, mana: mana, leg: leg };
    DeckBuilder.addCard(card);
    console.log("asd");
  });

  $("#deck-list tbody").on( "click",".quick-remove", function(){
    id = $(this).parent().parent().attr('id');
    DeckBuilder.removeCard(id);
  });

  $('#tags').tagsInput({
    'width':'100%'
  });

  var monkeyList = new List('deckbuilder-list', {
    valueNames: ['name','mana','klass','description','race','rarity'],
    page: 6,
    plugins: [
      ListPagination({})
    ]
  });
  $('.all-mana-filter').click(function(){
    monkeyList.filter();
    monkeyList.search();
    $(".search").val('');
    $(".filter").removeClass("active");
  });
  $('.class-cards').click(function(){
    monkeyList.filter();
    monkeyList.search();
    monkeyList.search("#{@deck.klass_id}", ["klass"]);
    $(".filter").removeClass("active");
    $(this).addClass("active");
  });
  $('.mana-filter').click(function(){
    monkeyList.filter();
    monkeyList.search();
    mana = $(this).data('mana');
    if (mana == 10){
      monkeyList.filter(function(item) {
       if (item.values().mana > 9) {
           return true;
       } else {
           return false;
       }
      });
    }else if(mana == 0) {
      monkeyList.filter(function(item) {
       if (item.values().mana == 0) {
           return true;
       } else {
           return false;
       }
      });
    }else{
      monkeyList.search(mana, ["mana"]);
    }
    
    $(".filter").removeClass("active");
    $(this).addClass("active");
  });

  
  $('.search').on("keyup keypress", function(e) {
    var code = e.keyCode || e.which; 
    if (code  == 13) {               
      e.preventDefault();
      return false;
    }
  });
- if params[:action] == "edit"
  javascript:
    DeckBuilder.drawCards();
javascript:
  $('#deck-list').tablesorter( {sortList: [[0,0]]} );
