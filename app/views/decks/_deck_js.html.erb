<script async type="text/javascript">
  $(window).load(function(){
    var DeckBuilder = (new function() {

      /**
       * All the cards in the game
       */
      var _allCards = [
        <% if enabled %>
          <% Card.order("name ASC").each do |card| %>
            <%= raw card.toJSONWithImage() %>,
          <% end %>
        <% elsif !@deck.cardstring.nil? %>
          <% @card_array.map(&:first).sort_by {|q| q.name}.each do |card| %>
            <%= raw card.toJSONWithImage() %>,
          <% end %>
        <% end %>
      ];

      function _getCardById(id) {
        for(var i = 0; i < _allCards.length; i++)
          if(_allCards[i].id == id)
            return _allCards[i]
        return null;
      }

      var _cards = [];

      var _changeHandlers = [];
      function _fireChange() {
        for(var i = 0; i < _changeHandlers.length; i++)
          _changeHandlers[i]();
      }


      function _addCardById(id) {
        id = parseInt(id);
        var alreadyFound = false;
        for(var i = 0; i < _cards.length; i++) {
          var card = _cards[i];
          if(card.id == id) {
            alreadyFound = true;
            if(card.rarity_id == 5)  // you can only have one legendary
              break;
            _cards[i].qty = 2;
            break;
          };
        }

        var card = _getCardById(id);
        if(card&& !alreadyFound) {
          card.qty = 1;
          _cards.push(card);
        }

        _fireChange();
      }

      function _setCardString(str) {
        _cards = [];
        var groups = str.split(',');
        for(var i = 0; i < groups.length; i++) {
          var card = groups[i].split('_');
          var id = card[0];
          var qty = parseInt(card[1]);
          for(var num = 0; num < qty; num++) {
            _addCardById(id);
          }
        }
        _render();
      }

      function _render() {

        _drawCurveChart('mana', '#3498db');
        _drawCurveChart('attack', '#f1c40f');
        _drawCurveChart('health', '#e74c3c');
        _drawTypeDistributionChart();
        _drawMechanicsChart();
      }

      var _curveGraphOptions = {
        legend: {
            show: false
        },
        series: {
            bars: {
                align: 'left',
                fill: 0.7,
                barWidth: 0.8,
                show: true,
                lineWidth: 0
            }
        },
        grid: {
        borderWidth: 0,
        hoverable: true
      },
          xaxis: {
              ticks: [[0.5,"0"],[1.5,"1"],[2.5,"2"],[3.5,"3"],[4.5,"4"],[5.5,"5"],[6.5,"6"],[7.5,"7+"]],
            tickLength: 0 // disable tick
          },
          yaxis: {
            show:false
        }

      };

      function _showBarchartTooltip(x, y, contents) {
          $('<div id="flotTooltip">' + contents + '</div>').css({
              top: y - 30,
              left: x - 40
          }).appendTo("body").fadeIn(200);
      }
      var _previousPoint;
      function _enableBarTooltips(selector, flip) {
        flip = typeof(flip) == 'undefined' ? false : flip;
        selector.bind("plothover", function (event, pos, item) {
            $("#x").text(pos.x.toFixed(2));
            $("#y").text(pos.y.toFixed(2));

              if (item) {
                  if (_previousPoint != item.dataIndex) {
                      _previousPoint = item.dataIndex;

                      $("#tooltip").remove();
                      var x = item.datapoint[0].toFixed(2),
                          y = item.datapoint[1].toFixed(2);

                      var numCards = flip ? item.datapoint[0] : item.datapoint[1];
                      var text = numCards + " card";
                      if(numCards != 1)
                        text += "s";
                      _showBarchartTooltip(item.pageX, item.pageY, text);
                  }
              }
              else {
                  $("#flotTooltip").remove();
                  previousPoint = null;
              }
        });
      }
      function _drawCurveChart(type, color) {

        var groups = {
          "0":0,
          "1":0,
          "2":0,
          "3":0,
          "4":0,
          "5":0,
          "6":0,
          "7+":0
        };
        for(var i = 0; i < _cards.length; i++) {
          var card = _cards[i];
          if(card[type] != null) {
            var val = parseInt(card[type]);
            if(val < 7)
              groups[val + ""] += parseInt(card.qty);
            else
              groups["7+"] += parseInt(card.qty);
          }
        }

        var graphData = [
          {
            color: color,
              data: [
              [0, groups["0"]],
              [1, groups["1"]],
              [2, groups["2"]],
              [3, groups["3"]],
              [4, groups["4"]],
              [5, groups["5"]],
              [6, groups["6"]],
              [7, groups["7+"]]
            ]
          }
        ];
        $('#' + type + 'CurveChart').html("");
        $.plot($('#' + type + 'CurveChart'), graphData, _curveGraphOptions);
        _enableBarTooltips($('#' + type + 'CurveChart'));
      }

      function _drawMechanicsChart() {

        var mechanics = [
          "attack+",
          "battlecry",
          "charge",
          "choose one",
          "combo",
          "control",
          "counter",
          "deal damage",
          "deathrattle",
          "destroy",
          "discard",
          "divine shield",
          "draw",
          "enrage",
          "freeze",
          "health+",
          "immune",
          "overload",
          "poison",
          "random",
          "return",
          "secret",
          "silence",
          "stealth",
          "spell damage",
          "summon",
          "un-targetable",
          "taunt",
          "transform",
          "windfury"
        ];

        var groups = {};
        for(var i = 0; i < mechanics.length; i++) {
          groups[mechanics[i]] = 0;
        }
        for(var i = 0; i < _cards.length; i++) {
          var card = _cards[i];
          if(card.description) {
            for(var m = 0; m < mechanics.length; m++) {
              var mechanic = mechanics[m].toLowerCase();

              switch(mechanic) {
                case 'attack+':
                  if(card.description.toLowerCase().match(/\+\d+\s*attack/))
                    groups[mechanic] += parseInt(card.qty);
                  break;
                case 'deal damage':
                  if(card.description.toLowerCase().match(/deal\s\d+\sdamage/))
                    groups[mechanic] += parseInt(card.qty);
                  break;
                case 'health+':
                  if(card.description.toLowerCase().match(/\+\d+\s*health/))
                    groups[mechanic] += parseInt(card.qty);
                  break;
                case 'un-targetable':
                  if(card.description.toLowerCase().match(/can.*t\sbe\s(the)?\s*target/))
                    groups[mechanic] += parseInt(card.qty);
                  break;
                default:
                if(card.description.toLowerCase().match(new RegExp(mechanic,'g')))
                  groups[mechanic] += parseInt(card.qty);
              }
            }
          }
        }

        var ticks = [];
        var points = []
        var i = 99;
        for(var mechanic in groups) {
          if(groups[mechanic] > 0) {
            ticks.push([i + .5, mechanic.charAt(0).toUpperCase() + mechanic.slice(1) + " &nbsp;"])
            points.push([groups[mechanic], i]);
            i--;
          }
        }
        var graphData = [
          {
            color: 'gray',
              data: points
          }
      ];
      var graphConfig = jQuery.extend(true, {}, _curveGraphOptions);
      graphConfig.series.bars.horizontal =true;
      graphConfig.xaxis.ticks = [];
      graphConfig.yaxis.ticks = ticks;
      graphConfig.yaxis.show = true;
      graphConfig.yaxis.tickLength = 0;
      $('#mechanicsChart').height((17 * (points.length + 1)) + 'px');
      $('#mechanicsChart').html("");
        $.plot($('#mechanicsChart'), graphData, graphConfig);

        _enableBarTooltips($('#mechanicsChart'), true);
      }

      function _drawTypeDistributionChart() {

        var types = [];
        <% Type.order("id ASC").each do |type| %>
          types.push(<%= raw type.to_json %>);
        <% end %>

        var pointVals = {};
        for(var i = 0; i < _cards.length; i++) {
          var card = _cards[i];
          pointVals[card.type_name] = pointVals[card.type_name] || 0;
          pointVals[card.type_name] += card.qty;
        }

        var data = [];
        for(var i = 0; i < types.length; i++) {
          var type = types[i];
            data.push({ label: type.name,  data: pointVals[type.name]});
        }
        $("#typeChart").html("");
        $.plot($("#typeChart"), data, {
              series: {
                  pie: {
                      show: true,
                      radius: 1,
                    label: {
                        show: true,
                        radius: 3/4,
                        formatter: function(label, series) {
                          return series.data[0][1];
                        },
                        background: {
                            opacity: 0
                        }
                    }
                  }
               },
               legend: {
                  labelBoxBorderColor: "none",
                  show:true
               }
        });
      }

      function _enable() {
        _enabled = true;

        _deckBuilderAddCardField.change(_deckBuilderAddCardChange);

        $('.deckbuilderWrapper').addClass('enabled');

        // no context builder in deckbuilder
        $('.deckbuilderWrapper').bind("contextmenu",function(){
             return false;
          });
        }
        if(<%= enabled.to_s %>)
          _enable();

      return {
        enable:function() {
          _enable();
        },
        render:function() {
          _render();
        },
        getNumCards:function() {
          return _getNumCards();
        },
        getCardString:function() {
          return _getCardString();
        },
        addChangeHandler:function(callback) {
          _changeHandlers.push(callback);
        },
        setCardString:function(str) {
          _setCardString(str);
        },
        setClassId:function(classId) {
          _setClassId(classId);
        }
      };
    }());
    DeckBuilder.setCardString(gon.cardstring);
    DeckBuilder.render();
    if ($(window).width() > 1200){
      var fullCardImage = $('#deckBuilderFullCardView');

      $('.card').mouseover(function(e) {
        $this = $(this);
        img_url = "/assets/cards/" + $this.find(".name").text().toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,'') + ".png";
        $('.card').fadeTo(0, .8);
        $this.fadeTo(0, 1);
        fullCardImage.attr('src', img_url);
        var top = $this.position().top;
        if($this.parent().offset().top + top + fullCardImage.height() - $(document).scrollTop() > $(window).height())
          top = $(window).height() - fullCardImage.height() - $this.parent().offset().top - 20 + $(document).scrollTop();
        fullCardImage.css({
          top: top + 'px',
          left: ($this.position().left + 250) + 'px'
        })
        fullCardImage.stop( true, true ).fadeIn();
      });
      $('.card').mouseout(function() {
        $('.card').fadeTo(0, 1);
        fullCardImage.stop( true, true ).fadeOut();
      });
    }
    $.plot($("#rank-chart"), [{
        data: gon.rank_wr,
        points: {
          show: true
        }
      }],
      {
        yaxis: {
          max: 100,
          min: 0
        },
        xaxis: {
          tickDecimals: 0
        },
        grid: {
        borderWidth: 0,
        hoverable: true
      }
      });
  });
</script>
