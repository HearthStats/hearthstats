- content_for :actions do
  div class="btn blue btn-sm deck-text-trigger" = t('.toggle_text_import')

= form_for(@deck) do |f|
  = f.hidden_field :cardstring, value: @deck.cardstring
  - if @deck.errors.any?
    div#error_explanation
      h2
        = pluralize(@deck.errors.count, "error")
        = t('shared.prohibited_this_being_saved', resouce: t('shared.deck'))
        |:
      ul
        - @deck.errors.full_messages.each do |msg|
          li = msg
  .row
    .col-sm-12.col-md-12.col-lg-3
      .form-body
        h3 Deck Details
        .form-group
          = f.label t('decks.form.class')
          |: &nbsp;
          = @deck.klass.try(:name)
        .form-group
          = f.label t('decks.form.name')
          = f.text_field :name, class: 'form-control'
        .form-group
          = f.label t('decks.form.notes')
          = f.text_area :notes, :class => 'redactor form-control', :rows => 10, :cols => 20
        .form-group
          = f.label t('decks.form.tags')
          input name="tags" id="tags" width="100%" value="#{@deck.tag_list}"
          div
            small Tags separated by commas
        .form-group
          span = f.check_box :is_public
          label
            |&nbsp;
            = t("decks.form.this_deck_public")
        .form-group
          = f.submit class: 'btn btn-block green'
        .form-group
          = link_to 'Create New Deck Version', version_deck_path(@deck),class: 'btn btn-block yellow', method: :post
        .form-group
          label = t("decks.form.other_versions")
          div
            - @deck.deck_versions.each do |version|
                = link_to "v#{version.version}", deck_path(@deck, version: version.version), class: "btn blue btn-sm btn-version"
    .col-sm-12.col-md-7.col-lg-6
      .form-body
        h3 Deck Builder
        div class="deck-text-box"
          h5
            |Deck Importer&nbsp;
            a href="http://hearthstats.uservoice.com/knowledgebase/articles/339087" target="_blank"
              i class="fa fa-question-circle tooltips" data-original-title="Click to learn more"
          small This will override your current list
          = text_area_tag :deck_text, nil , class: "deck-text"
        #deckbuilder-list
          .form-group
            label =t("decks.form.search")
            input type="text" class="search form-control"
          ul.list.card-list
            - Card.where(collectible: true, klass_id: [@deck.klass_id ,nil]).order(:mana).each do |card|
              li id="#{card.id}" data-rarity="#{card.rarity_id}" data-name="#{card.name}"
                img.deckbuilder-img src='https://s3-us-west-2.amazonaws.com/hearthstats/cards/#{card.name.parameterize}.png'
                p.name.hidden = card.name
                .deckbuilder-actions
                  .add Add
                  .remove Remove
          .cf
          ul.pagination
    .col-sm-12.col-md-3.col-lg-3
      .total-card-count 0 of 30
      table#deck-list
        thead
          th =t("decks.form.name")
          th =t("decks.form.count")
          th =t("decks.form.controls")
        tbody
      small.top-border The green star indicated this card was edited


javascript:

  var DeckBuilder = new function(){
    var cardArray = [];
    var cardName = [];
    var totalCardCount = 0;
    var deck = gon.deck;
    var allCards = gon.cards;

    this.drawCards = function(){
      if ( deck.cardstring.length === 0 ) return;
      deckCards = deck.cardstring.split(",");
      deckCards.forEach(function(card){
        id = parseInt(card.split("_")[0]);
        quantity = parseInt(card.split("_")[1]);
        cardArray[id] = quantity;
        cardName[id] = allCards[id-1].name
        DeckBuilder._drawCardToTable(id)
        totalCardCount = totalCardCount + quantity;
      });

      DeckBuilder.createCardString();
      $('#deck_klass_id').val(deck.klass_id);

    }

    this.addCard = function(id, name, leg){
      if (totalCardCount >= 30){
        this._errorNotification("deck-max");
        return;
      }
      leg = typeof leg !== 'undefined' ? leg : false;
      id = parseInt(id)
      cardCount = cardArray[id]
      if (cardCount == undefined ){
        cardArray[id] = 1;
        cardName[id] = name
        totalCardCount = totalCardCount + 1;
      }else if( cardCount == 1 ){
        if (leg == true){
          this._errorNotification("legend");
          return
        }else{
          cardArray[id] = 2;
          totalCardCount = totalCardCount + 1;
        }
      }else{
        this._errorNotification("max");
      }
      this._addCardToTable(id);
      this.createCardString();
      $('#deck-list').tablesorter( {sortList: [[0,0]]} );
    };

    this.removeCard = function(id){
      id = parseInt(id)
      cardCount = cardArray[id]
      if (cardCount == 2 ){
        cardArray[id] = 1
        totalCardCount = totalCardCount - 1;
      }else if( cardCount == 1 ){
        cardArray[id] = undefined;
        totalCardCount = totalCardCount - 1;
      }else{
        this._errorNotification("none");
      }

      this._removeCardToTable(id);
      this.createCardString();
      $('#deck-list').tablesorter( {sortList: [[0,0]]} );
    };

    this._errorNotification = function(type){
      if (type == "max"){
        console.log("Max Card Limit");
        toastr.error("#{t('decks.form.card_limit')}");
      }
      if (type == "deck-max"){
        console.log("Max Deck Limit");
        toastr.error("#{t('decks.form.deck_limit')}");
      }
      if (type == "none"){
        console.log("No More In Deck");
        toastr.error("#{t('decks.form.no_more')}");
      }
      if (type == "legend"){
        console.log("Only one legendary allowed per deck.");
        toastr.error("#{t('decks.form.legend')}");
      }
    };

    this._addCardToTable = function(i){
      if (cardArray[i] == 1){
        $("#deck-list").append("<tr id="+i+"><td>"+cardName[i]+"</td><td class='card-count'><span class='green'>* </span>"+cardArray[i]+"</td><td><div class='quick-add'>+</div><div class='quick-remove'>-</div></td></tr>");
      } else if (cardArray[i] == 2){
        $("#deck-list tr#"+i+" .card-count").html("<span class='green'>* </span>2");
      }
    };

    this._drawCardToTable = function(i){
      if (cardArray[i] == 1){
        $("#deck-list").append("<tr id="+i+"><td>"+cardName[i]+"</td><td class='card-count'>"+cardArray[i]+"</td><td><div class='quick-add'>+</div><div class='quick-remove'>-</div></td></tr>");
      } else if (cardArray[i] == 2){
        $("#deck-list").append("<tr id="+i+"><td>"+cardName[i]+"</td><td class='card-count'>2</td><td><div class='quick-add'>+</div><div class='quick-remove'>-</div></td></tr>");
      }
    };

    this._removeCardToTable = function(i){
      if (cardArray[i] == 1){
        $("#deck-list tr#"+i+" .card-count").text("1");
      } else if (cardArray[i] == undefined){
        $("#deck-list tr#"+i).fadeOut();
      }
      cardCount = cardCount - 1;
    };

    this.createCardString = function(){
      var _cardString = [];
      for (i = 0; i < cardArray.length; ++i) {
        if (cardArray[i] != undefined){
          _cardString.push(i+"_"+cardArray[i]);
        }
      }
      $('#deck_cardstring').val(_cardString.join());
      $('.total-card-count').text(totalCardCount + " of 30");
    }
  }

  DeckBuilder.drawCards();

  $(".add").click(function(){
    id = $(this).parent().parent().attr('id');
    name = $(this).parent().parent().data('name')
    leg = $(this).parent().parent().data('rarity') == '5' ? true : false;
    DeckBuilder.addCard(id, name, leg);
  });

  $(".remove").click(function(){
    id = $(this).parent().parent().attr('id');
    DeckBuilder.removeCard(id);
  });

  $(".quick-add").click(function(){
    id = $(this).parent().parent().attr('id');
    name = $(this).parent().parent().data('name')
    leg = $(this).parent().parent().data('rarity') == '5' ? true : false;
    console.log(name);
    DeckBuilder.addCard(id, name, leg);
  });

  $(".quick-remove").click(function(){
    id = $(this).parent().parent().attr('id');
    DeckBuilder.removeCard(id);
  });

  $('#tags').tagsInput({
    'width':'100%'
  });

  var monkeyList = new List('deckbuilder-list', {
    valueNames: ['name'],
    page: 6,
    plugins: [
      ListPagination({})
    ]
  });
  $('#deck-list').tablesorter( {sortList: [[0,0]]} );
