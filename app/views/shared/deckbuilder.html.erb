<div class="deckbuilderWrapper">
	<div class="deckBuilderTools">
		<h2>Deck Builder</h2>
		<p>
			<select name="deckBuilderAddCardField">
				<option value="">Add a card ...</option>
				<% Card.order("name ASC").each do |card| %>
					<option value="<%= card.id %>" icon	="<%= card.getImageUrl() %>"><%= card.name %></option>
				<% end %>
			</select>
		</p>
		<p><span class="deckBuilderNumCards"></span> of 30 cards</p>
	</div>
	<div class="cardListHeader">
		<h2>Card List</h2>
		<div class="deckBuilderMissingCards ui-state-error">
			<p>This deck is incomplete.</p>
			<p>It only has <span class="deckBuilderNumCards"></span> of 30 cards.</p>
		</div>
	</div>
	<div class="deckBuilderCardsWrapper"></div>
</div>

<script type="text/javascript">
	var DeckBuilder = (new function() {
		
		var _enabled = false;
		var _deckBuilderAddCardField = $('select[name="deckBuilderAddCardField"]');
		var _deckBuilderAddCardFieldSelect2;
		var _classId;
		
		/**
		 * All the cards in the game 
		 */
		var _allCards = [
			<% Card.order("name ASC").each do |card| %>
				<%= raw card.toJSONWithImage() %>,
			<% end %>
		];
		
		function _getCardById(id) {
			for(var i = 0; i < _allCards.length; i++)
				if(_allCards[i].id == id)
					return _allCards[i]
			return null; 	
		}
		
		/**
		 * Format the deck builder add card selector options 
		 */
		function _formatdeckBuilderAddCardFieldSelector(o) {
			if(o.text == "Add a card ...")
				return null;
			return '<img src="' + $(o.element[0]).attr('image') + '" style="height:50px;"/> ' + o.text
		}
		
		/**
		 * Generate the deck builder card selector 
		 */
		function _generateCardSelector() {
			
			_deckBuilderAddCardField.html('<option value="">Add a card ...</option>');
			for(var i = 0; i < _allCards.length; i++) {
				var card = _allCards[i];
				if(!card.klass_id || parseInt(card.klass_id) == _classId)
					_deckBuilderAddCardField.append('<option value="' + card.id + '" image="' + card.image + '">' + card.name + '</option>');
			}
			
			 _deckBuilderAddCardFieldSelect2 = _deckBuilderAddCardField.select2({
		    	formatResult: _formatdeckBuilderAddCardFieldSelector,
		    	width:'220px'
		    });
			
		}
		
		var _cards = [];
		
		var _changeHandlers = [];
		function _fireChange() {
			for(var i = 0; i < _changeHandlers.length; i++)
				_changeHandlers[i]();
		}
		
		/**
		 * Sort cards by mana cost and name 
		 */
		function _sortCards() {
			
			var manaGroups = {};
			
			for(var i = 0; i < _cards.length; i++) {
				var card = _cards[i];
				manaGroups[card.mana + ""] = manaGroups[card.mana + ""] || [];
				manaGroups[card.mana + ""].push(card); 
			}
			
			_cards = [];
			
			for(var mana in manaGroups) {
				var group = manaGroups[mana];
				group.sort(function(a, b) {
					var valA;
					var valB;
				    valA = a.name.toUpperCase();
				    valB = b.name.toUpperCase();
				    return (valA < valB) ? -1 : (valA > valB) ? 1 : 0;
				});
				for(var i = 0; i < group.length; i++) {
					_cards.push(group[i]);
				}
			}
		}
		
		function _drawCards() {
			_sortCards();
			var cardsWrapper = $('.deckBuilderCardsWrapper');
			cardsWrapper.html("");
			for(var i = 0; i < _cards.length; i++) {
				var card = _cards[i];
				var wrapperClass = "normal";
				if(card.qty == 2)
					wrapperClass = "two";
				if(card.rarity_id == 5)
					wrapperClass = "legendary";
				var title = "Right-click to remove";
				if(_getNumCards() < 30 && card.qty < 2 && card.rarity_id != 5)
					title = "Left-click to add. " + title;
				if(!_enabled)
					title = "";
				cardsWrapper.append(
					'<div class="cardWrapper ' + wrapperClass + '" title="' + title + '" cardid="' + card.id + '">' +
						'<div class="mana">' + card.mana + '</div>' +
						'<div class="name">' + card.name + '</div>' +
						'<div class="qty">' + card.qty + '</div>' +
						'<img src="' + card.image + '" class="image"/>' +
						'<div class="bg">&nbsp;</div>' +
						'<img src="' + card.image + '" class="image"/>' +
					'</div>'
				);
			}
		}
		
		function _addCardById(id) {
			if(_getNumCards() == 30)
				return;
			id = parseInt(id);
			var alreadyFound = false;
			for(var i = 0; i < _cards.length; i++) {
				var card = _cards[i];
				if(card.id == id) {
					alreadyFound = true;
					if(card.rarity_id == 5)	// you can only have one legendary
						break;
					_cards[i].qty = 2;
					break;
				};
			}
			
			var card = _getCardById(id);
			if(card&& !alreadyFound) {
				card.qty = 1;
				_cards.push(card);
			}
				
			_render();
			_fireChange();
		}
		function _removeCardById(id) {
			id = parseInt(id);
			var alreadyFound = false;
			for(var i = 0; i < _cards.length; i++) {
				var card = _cards[i];
				if(card.id == id) {
					if(card.qty == 1)
						_cards.splice(i, 1);
					else 
						_cards[i].qty--;
				};
			}
			
			_render();
			_fireChange();
		}
		
		function _setCardString(str) {
			_cards = [];
			var groups = str.split(',');
			for(var i = 0; i < groups.length; i++) {
				var card = groups[i].split('_');
				var id = card[0];
				var qty = parseInt(card[1]);
				for(var num = 0; num < qty; num++) {
					_addCardById(id);
				}
			}			
		}
		
		function _render() {
			
			_drawCards();
			
			if(_enabled) {
				_generateCardSelector();
				
				// left click on card to add
				$('.deckbuilderWrapper .cardWrapper').click(function() {
					_addCardById($(this).attr('cardid'));
				});
				
				// right click on card to remove
				$('.deckbuilderWrapper .cardWrapper').mousedown(function(e){ 
					if( e.button == 2 ) { 
						_removeCardById($(this).attr('cardid')); 
						return false; 
					} 
					return true; 
				}); 
				$('.deckbuilderWrapper .cardWrapper').bind("contextmenu",function(){
			       return false;
			    }); 
			} else {
				if(_getNumCards() < 30) {
					$('.deckBuilderMissingCards').show();
				} else {
					$('.deckBuilderMissingCards').hide();
				}
			}
			
			
			$('.deckBuilderNumCards').html(_getNumCards());
		}
		
		function _deckBuilderAddCardChange() {
			var id = parseInt($(this).val());
			_addCardById(id);
	    	_generateCardSelector();
		}
		
		function _getNumCards() {
			var numCards = 0;
			for(var i = 0; i < _cards.length; i++)
				numCards += _cards[i].qty;
			return numCards;
		}
		
		function _getCardString() {
			_sortCards();
			var parts = [];
			for(var i = 0; i < _cards.length; i++) {
				var card = _cards[i];
				parts.push(card.id + '_' + card.qty);
			}
			return parts.join(',');
			
		}
		
		function _purgeNonClassCards() {
			for(var i = 0; i < _cards.length; i++) {
				var card = _cards[i];
				console.log(card.klass_id + " == " + _classId);
				if(card.klass_id && parseInt(card.klass_id) != _classId)
					_cards.splice(i, 1);
			}
			_fireChange();
		}
		
		function _setClassId(classId) {
			_classId = parseInt(classId);
			_purgeNonClassCards();
			_render();
		}
	    
		return {
			enable:function() {
				_enabled = true;
				
				_deckBuilderAddCardField.change(_deckBuilderAddCardChange);
				
				$('.deckbuilderWrapper').addClass('enabled');
				
			    // no context builder in deckbuilder
				$('.deckbuilderWrapper').bind("contextmenu",function(){
			       return false;
			    }); 
			},
			render:function() {
				_render();
			},
			getNumCards:function() {
				return _getNumCards();
			},
			getCardString:function() {
				return _getCardString();
			},
			addChangeHandler:function(callback) {
				_changeHandlers.push(callback);	
			},
			setCardString:function(str) {
				_setCardString(str);
			},
			setClassId:function(classId) {
				_setClassId(classId);
			}
		};
	}());
    
</script>
