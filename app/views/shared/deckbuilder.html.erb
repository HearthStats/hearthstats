<div class="deckbuilderWrapper">
	<label>Card List</label>
	<div class="deckBuilderTools">
		<p>
			<select name="deckBuilderAddCardField">
				<option value="">Add a card ...</option>
				<% Card.order("name ASC").each do |card| %>
					<option value="<%= card.id %>" icon	="<%= card.getImageUrl() %>"><%= card.name %></option>
				<% end %>
			</select>
		</p>
		<p><span class="deckBuilderNumCards"></span> of 30 cards</p>
	</div>
	<div class="cardListHeader">
		<div class="deckBuilderMissingCards ui-state-error">
			<p>This deck is incomplete.</p>
			<p>It only has <span class="deckBuilderNumCards"></span> of 30 cards.</p>
		</div>
	</div>
	<div class="deckBuilderCardsWrapper"></div>
	<div class="deckBuilderStats">
		<div>Mana Curve:</div>
		<div id="manaCurveChart" class="deckBuilderCurveChart"></div>
		<div>Attack Distribution:</div>
		<div id="attackCurveChart" class="deckBuilderCurveChart"></div>
		<div>Health Distribution:</div>
		<div id="healthCurveChart" class="deckBuilderCurveChart"></div>
		<p>Type Distribution:</p>
		<div id="typeChart"></div>
		<p>Mechanics:</p>
		<div id="mechanicsChart"></div>
	</div>
	<!-- Preload images -->
	<div class="preloadCardBg"></div>
	<div class="preloadCardBg_2"></div>
	<div class="preloadCardBg_legendary"></div>
</div>

<script type="text/javascript">
	var DeckBuilder = (new function() {
		
		var _enabled = false;
		var _deckBuilderAddCardField = $('select[name="deckBuilderAddCardField"]');
		var _deckBuilderAddCardFieldSelect2;
		var _classId;
		
		/**
		 * All the cards in the game 
		 */
		var _allCards = [
			<% Card.order("name ASC").each do |card| %>
				<%= raw card.toJSONWithImage() %>,
			<% end %>
		];
		
		function _getCardById(id) {
			for(var i = 0; i < _allCards.length; i++)
				if(_allCards[i].id == id)
					return _allCards[i]
			return null; 	
		}
		
		/**
		 * Format the deck builder add card selector options 
		 */
		function _formatdeckBuilderAddCardFieldSelector(o) {
			if(o.text == "Add a card ...")
				return null;
			return '<img src="' + $(o.element[0]).attr('image') + '" style="height:50px;"/> ' + o.text
		}
		
		/**
		 * Generate the deck builder card selector 
		 */
		function _generateCardSelector() {
			
			_deckBuilderAddCardField.html('<option value="">Add a card ...</option>');
			for(var i = 0; i < _allCards.length; i++) {
				var card = _allCards[i];
				if(!card.klass_id || parseInt(card.klass_id) == _classId)
					_deckBuilderAddCardField.append('<option value="' + card.id + '" image="' + card.image + '">' + card.name + '</option>');
			}
			
			 _deckBuilderAddCardFieldSelect2 = _deckBuilderAddCardField.select2({
		    	formatResult: _formatdeckBuilderAddCardFieldSelector,
		    	width:'220px'
		    });
			
		}
		
		var _cards = [];
		
		var _changeHandlers = [];
		function _fireChange() {
			for(var i = 0; i < _changeHandlers.length; i++)
				_changeHandlers[i]();
		}
		
		/**
		 * Sort cards by mana cost and name 
		 */
		function _sortCards() {
			
			var manaGroups = {};
			
			for(var i = 0; i < _cards.length; i++) {
				var card = _cards[i];
				manaGroups[card.mana + ""] = manaGroups[card.mana + ""] || [];
				manaGroups[card.mana + ""].push(card); 
			}
			
			_cards = [];
			
			for(var mana in manaGroups) {
				var group = manaGroups[mana];
				group.sort(function(a, b) {
					var valA;
					var valB;
				    valA = a.name.toUpperCase();
				    valB = b.name.toUpperCase();
				    return (valA < valB) ? -1 : (valA > valB) ? 1 : 0;
				});
				for(var i = 0; i < group.length; i++) {
					_cards.push(group[i]);
				}
			}
		}
		
		function _drawCards() {
			_sortCards();
			var cardsWrapper = $('.deckBuilderCardsWrapper');
			cardsWrapper.html("");
			for(var i = 0; i < _cards.length; i++) {
				var card = _cards[i];
				var wrapperClass = "normal";
				if(card.qty == 2)
					wrapperClass = "two";
				if(card.rarity_id == 5)
					wrapperClass = "legendary";
				var title = "Right-click to remove";
				if(_getNumCards() < 30 && card.qty < 2 && card.rarity_id != 5)
					title = "Left-click to add. " + title;
				if(!_enabled)
					title = "";
				cardsWrapper.append(
					'<div class="cardWrapper ' + wrapperClass + '" title="' + title + '" cardid="' + card.id + '">' +
						'<div class="mana">' + card.mana + '</div>' +
						'<div class="name">' + card.name + '</div>' +
						'<div class="qty">' + card.qty + '</div>' +
						'<img src="' + card.image + '" class="image"/>' +
						'<div class="bg">&nbsp;</div>' +
						'<img src="' + card.image + '" class="image"/>' +
					'</div>'
				);
			}
		}
		
		function _addCardById(id) {
			if(_getNumCards() == 30)
				return;
			id = parseInt(id);
			var alreadyFound = false;
			for(var i = 0; i < _cards.length; i++) {
				var card = _cards[i];
				if(card.id == id) {
					alreadyFound = true;
					if(card.rarity_id == 5)	// you can only have one legendary
						break;
					_cards[i].qty = 2;
					break;
				};
			}
			
			var card = _getCardById(id);
			if(card&& !alreadyFound) {
				card.qty = 1;
				_cards.push(card);
			}
				
			_render();
			_fireChange();
		}
		function _removeCardById(id) {
			id = parseInt(id);
			var alreadyFound = false;
			for(var i = 0; i < _cards.length; i++) {
				var card = _cards[i];
				if(card.id == id) {
					if(card.qty == 1)
						_cards.splice(i, 1);
					else 
						_cards[i].qty--;
				};
			}
			
			_render();
			_fireChange();
		}
		
		function _setCardString(str) {
			_cards = [];
			var groups = str.split(',');
			for(var i = 0; i < groups.length; i++) {
				var card = groups[i].split('_');
				var id = card[0];
				var qty = parseInt(card[1]);
				for(var num = 0; num < qty; num++) {
					_addCardById(id);
				}
			}			
		}
		
		function _render() {
			
			_drawCards();
			if(_getNumCards() > 0)
				$('.deckBuilderStats').show();
			else
				$('.deckBuilderStats').hide();
			
			if(_enabled) {
				_generateCardSelector();
				
				// left click on card to add
				$('.deckbuilderWrapper .cardWrapper').click(function() {
					_addCardById($(this).attr('cardid'));
				});
				
				// right click on card to remove
				$('.deckbuilderWrapper .cardWrapper').mousedown(function(e){ 
					if( e.button == 2 ) { 
						_removeCardById($(this).attr('cardid')); 
						return false; 
					} 
					return true; 
				}); 
				$('.deckbuilderWrapper .cardWrapper').bind("contextmenu",function(){
			       return false;
			    }); 
			} else {
				if(_getNumCards() < 30) {
					$('.deckBuilderMissingCards').show();
				} else {
					$('.deckBuilderMissingCards').hide();
				}
			}
			
			
			$('.deckBuilderNumCards').html(_getNumCards());
			_drawCurveChart('mana', 'blue');
			_drawCurveChart('attack', 'gold');
			_drawCurveChart('health', 'red');
			_drawTypeDistributionChart();
			_drawMechanicsChart();
		}
		
		function _deckBuilderAddCardChange() {
			var id = parseInt($(this).val());
			_addCardById(id);
	    	_generateCardSelector();
		}
		
		function _getNumCards() {
			var numCards = 0;
			for(var i = 0; i < _cards.length; i++)
				numCards += _cards[i].qty;
			return numCards;
		}
		
		function _getCardString() {
			_sortCards();
			var parts = [];
			for(var i = 0; i < _cards.length; i++) {
				var card = _cards[i];
				parts.push(card.id + '_' + card.qty);
			}
			return parts.join(',');
			
		}
		
		function _purgeNonClassCards() {
			for(var i = 0; i < _cards.length; i++) {
				var card = _cards[i];
				if(card.klass_id && parseInt(card.klass_id) != _classId)
					_cards.splice(i, 1);
			}
			_fireChange();
		}
		
		function _setClassId(classId) {
			_classId = parseInt(classId);
			_purgeNonClassCards();
			_render();
		}
	    
	    var _curveGraphOptions = {
	        legend: {
	            show: false
	        },
	        series: {
	            bars: {
	                align: 'left',
	                fill: 0.7,
	                barWidth: 0.8,
	                show: true,
	                lineWidth: 0
	            }
	        },
	        grid: { 
			  borderWidth: 0,
			  hoverable: true
			},
	        xaxis: {
	            ticks: [[0.5,"0"],[1.5,"1"],[2.5,"2"],[3.5,"3"],[4.5,"4"],[5.5,"5"],[6.5,"6"],[7.5,"7+"]],
		        tickLength: 0 // disable tick
	        },
	        yaxis: {
	        	show:false
		    }
		    
	    };
	    function _showBarchartTooltip(x, y, contents) {
	        $('<div id="flotTooltip">' + contents + '</div>').css({
	            top: y - 30,
	            left: x - 10
	        }).appendTo("body").fadeIn(200);
	    }
	    var _previousPoint;
	    function _enableBarTooltips(selector, flip) {
	    	flip = typeof(flip) == 'undefined' ? false : flip;
	    	selector.bind("plothover", function (event, pos, item) {
		        $("#x").text(pos.x.toFixed(2));
		        $("#y").text(pos.y.toFixed(2));
		
	            if (item) {
	                if (_previousPoint != item.dataIndex) {
	                    _previousPoint = item.dataIndex;
	                    
	                    $("#tooltip").remove();
	                    var x = item.datapoint[0].toFixed(2),
	                        y = item.datapoint[1].toFixed(2);
	                    
	                    var numCards = flip ? item.datapoint[0] : item.datapoint[1];
	                    var text = numCards + " card";
	                    if(numCards != 1)
	                    	text += "s";
	                    _showBarchartTooltip(item.pageX, item.pageY, text);
	                }
	            }
	            else {
	                $("#flotTooltip").remove();
	                previousPoint = null;            
	            }
		    });
	    }
	    function _drawCurveChart(type, color) {
	    	
	    	var groups = {
	    		"0":0,
	    		"1":0,
	    		"2":0,
	    		"3":0,
	    		"4":0,
	    		"5":0,
	    		"6":0,
	    		"7+":0
	    	};
	    	for(var i = 0; i < _cards.length; i++) {
	    		var card = _cards[i];
	    		if(card[type] != null) {
		    		var val = parseInt(card[type]);
		    		if(val < 7)
		    			groups[val + ""] += parseInt(card.qty);
		    		else
		    			groups["7+"] += parseInt(card.qty);
		    	}
		    }
	    	
	    	var graphData = [
	    		{
	    			color: color,
			        data: [
			    		[0, groups["0"]],
			    		[1, groups["1"]],
			    		[2, groups["2"]],
			    		[3, groups["3"]],
			    		[4, groups["4"]],
			    		[5, groups["5"]],
			    		[6, groups["6"]],
			    		[7, groups["7+"]]
			    	]
			    }
			]; 
			$('#' + type + 'CurveChart').html("");
	    	$.plot($('#' + type + 'CurveChart'), graphData, _curveGraphOptions);
	    	
	    	_enableBarTooltips($('#' + type + 'CurveChart'));
	    }
	    function _drawMechanicsChart() {
	    	
	    	var mechanics = [
	    		"attack+",
	    		"battlecry",
	    		"charge",
	    		"choose one",
	    		"combo",
	    		"control",
	    		"counter",
	    		"deal damage",
	    		"deathrattle",
	    		"destroy",
	    		"discard",
	    		"divine shield",
	    		"draw",
	    		"enrage",
	    		"freeze",
	    		"health+",
	    		"immune",
	    		"overload",
	    		"poison",
	    		"random",
	    		"return",
	    		"secret",
	    		"silence",
	    		"stealth",
	    		"spell damage",
	    		"summon",
	    		"un-targetable",
	    		"taunt",
	    		"transform",
	    		"windfury"
	    	];
	    	
	    	var groups = {};
	    	for(var i = 0; i < mechanics.length; i++) {
	    		groups[mechanics[i]] = 0;	
	    	}
	    	for(var i = 0; i < _cards.length; i++) {
	    		var card = _cards[i];
	    		if(card.description) {
			    	for(var m = 0; m < mechanics.length; m++) {
			    		var mechanic = mechanics[m].toLowerCase();
			    		
			    		switch(mechanic) {
			    			case 'attack+':
					    		if(card.description.toLowerCase().match(/\+\d+\s*attack/))
					    			groups[mechanic] += parseInt(card.qty);
			    				break;
			    			case 'deal damage':
					    		if(card.description.toLowerCase().match(/deal\s\d+\sdamage/))
					    			groups[mechanic] += parseInt(card.qty);
			    				break;
			    			case 'health+':
					    		if(card.description.toLowerCase().match(/\+\d+\s*health/))
					    			groups[mechanic] += parseInt(card.qty);
			    				break;
			    			case 'un-targetable':
					    		if(card.description.toLowerCase().match(/can.*t\sbe\s(the)?\s*target/))
					    			groups[mechanic] += parseInt(card.qty);
			    				break;
			    			default:
				    		if(card.description.toLowerCase().match(new RegExp(mechanic,'g')))
				    			groups[mechanic] += parseInt(card.qty);
			    		}
			    	}
			    }
	    	}
	    	
	    	var ticks = [];
	    	var points = []
	    	var i = 99;
	    	for(var mechanic in groups) {
	    		if(groups[mechanic] > 0) {
		    		ticks.push([i + .5, mechanic.charAt(0).toUpperCase() + mechanic.slice(1) + " &nbsp;"])
		    		points.push([groups[mechanic], i]);
		    		i--;
	    		}
	    	}
	    	var graphData = [
	    		{
	    			color: 'gray',
			        data: points
			    }
			]; 	
			var graphConfig = jQuery.extend(true, {}, _curveGraphOptions);
			graphConfig.series.bars.horizontal =true;
			graphConfig.xaxis.ticks = [];
			graphConfig.yaxis.ticks = ticks;
			graphConfig.yaxis.show = true;
			graphConfig.yaxis.tickLength = 0;
			$('#mechanicsChart').height((17 * (points.length + 1)) + 'px');
			$('#mechanicsChart').html("");
	    	$.plot($('#mechanicsChart'), graphData, graphConfig);
	    	
	    	_enableBarTooltips($('#mechanicsChart'), true);
	    }
	    function _drawTypeDistributionChart() {
			
			var types = [];
			<% Type.order("id ASC").each do |type| %>
				types.push(<%= raw type.to_json %>);
			<% end %>
			
			var pointVals = {};
			for(var i = 0; i < _cards.length; i++) {
				var card = _cards[i];
				pointVals[card.type_id] = pointVals[card.type_id] || 0;
				pointVals[card.type_id] += card.qty;
			}
			
			var data = [];
			for(var i = 0; i < types.length; i++) {
				var type = types[i];
			    data.push({ label: type.name,  data: pointVals[type.id]});
			}
			$("#typeChart").html("");
			$.plot($("#typeChart"), data, {
		        series: {
		            pie: {
		                show: true,
		                radius: 1,
			            label: {
			                show: true,
			                radius: 3/4,
			                formatter: function(label, series) {
			                	return series.data[0][1];
			                },
			                background: { 
			                    opacity: 0
			                }
			            }
		            }
		         },
		         legend: {
		            labelBoxBorderColor: "none",
		            show:true
		         }
			});
	    }
		return {
			enable:function() {
				_enabled = true;
				
				_deckBuilderAddCardField.change(_deckBuilderAddCardChange);
				
				$('.deckbuilderWrapper').addClass('enabled');
				
			    // no context builder in deckbuilder
				$('.deckbuilderWrapper').bind("contextmenu",function(){
			       return false;
			    }); 
			},
			render:function() {
				_render();
			},
			getNumCards:function() {
				return _getNumCards();
			},
			getCardString:function() {
				return _getCardString();
			},
			addChangeHandler:function(callback) {
				_changeHandlers.push(callback);	
			},
			setCardString:function(str) {
				_setCardString(str);
			},
			setClassId:function(classId) {
				_setClassId(classId);
			}
		};
	}());
    
</script>

